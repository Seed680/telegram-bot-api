name: Build Linux x86_64 and ARM64

on:
  push:
    branches: [main, master]
    tags:
      - 'v*'
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  setup-release-info:
    name: Setup Release Info
    runs-on: ubuntu-22.04
    outputs:
      release-version: ${{ steps.version.outputs.version }}
      release-tag-name: ${{ steps.tag.outputs.tag-name }}
      release-title: ${{ steps.title.outputs.title }}
      is-prerelease: ${{ steps.prerelease.outputs.prerelease }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Extract version from CMakeLists.txt
        id: version
        run: echo "version=$(grep -oP 'project\(TelegramBotApi VERSION \K[\d.]+' CMakeLists.txt)" >> $GITHUB_OUTPUT

      - name: Determine Tag Name
        id: tag
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "tag-name=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "tag-name=manual-${{ github.run_number }}" >> $GITHUB_OUTPUT
          fi
      - name: Determine Release Title
        id: title
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "title=${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "title=manual-${{ github.run_number }}" >> $GITHUB_OUTPUT
          fi
      - name: Determine Prerelease
        id: prerelease
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "prerelease=false" >> $GITHUB_OUTPUT
          else
            echo "prerelease=true" >> $GITHUB_OUTPUT
          fi
  build-x86_64:
    name: Build for Linux x86_64
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake g++ make gperf zlib1g-dev libssl-dev
      - name: Build x86_64
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          cmake --build . --target install
      - name: Rename artifact
        run: mv build/telegram-bot-api build/telegram-bot-api-linux-x86_64

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: telegram-bot-api-x86_64
          path: build/telegram-bot-api-linux-x86_64

  build-arm64:
    name: Build for Linux ARM64
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install cross-compilation dependencies
        run: |
          sudo apt update
          sudo apt install -y \
          build-essential \
          cmake \
          gcc-aarch64-linux-gnu \
          g++-aarch64-linux-gnu \
          git \
          gperf \
          zlib1g-dev \
          libssl-dev
      - name: Create build directories
        run: |
          mkdir -p build
          mkdir -p build-native
      
      - name: Prepare for cross-compilation
        run: |
          cd build-native
          cmake -DCMAKE_BUILD_TYPE=Release ..
          cmake --build . --target prepare_cross_compiling
      
      - name: Add ARM64 architecture and fix sources
        run: |
          # 添加 arm64 架构
          sudo dpkg --add-architecture arm64
          
          # 1. 清理默认的安全源（这些源不支持ARM64）
          sudo sed -i '/security.ubuntu.com/d' /etc/apt/sources.list
          sudo rm -f /etc/apt/sources.list.d/*security*
          
          # 2. 添加ARM64专用源（仅使用ports.ubuntu.com）
          cat > /tmp/ubuntu-arm64.sources << 'INNER_EOF'
          Types: deb
          URIs: http://ports.ubuntu.com/ubuntu-ports/
          Suites: jammy jammy-updates jammy-backports
          Components: main universe restricted multiverse
          Architectures: arm64
          Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg
          INNER_EOF
          
          sudo mv /tmp/ubuntu-arm64.sources /etc/apt/sources.list.d/ubuntu-arm64.sources
          
          # 3. 保留x86_64的默认源（避免影响主机架构）
          cat > /tmp/ubuntu-amd64.sources << 'INNER_EOF'
          Types: deb
          URIs: http://archive.ubuntu.com/ubuntu/
          Suites: jammy jammy-updates jammy-backports jammy-security
          Components: main universe restricted multiverse
          Architectures: amd64
          Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg
          INNER_EOF
          
          sudo mv /tmp/ubuntu-amd64.sources /etc/apt/sources.list.d/ubuntu-amd64.sources
      
      - name: Update package list with ARM64 support
        run: |
          # 强制更新源并忽略可能的错误
          sudo apt update -o Acquire::Check-Valid-Until=false
          
          # 安装ARM64依赖
          sudo apt install -y \
          zlib1g-dev:arm64 \
          libssl-dev:arm64
      - name: Build ARM64
        run: |
         cd build
         cmake \
         -DCMAKE_BUILD_TYPE=Release \
         -DCMAKE_SYSTEM_NAME=Linux \
         -DCMAKE_CROSSCOMPILING=True \
         -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
         -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
         -DCMAKE_PREFIX_PATH=/usr/lib/aarch64-linux-gnu \
         ..
         cmake --build .
      - name: Rename artifact
        run: mv build/telegram-bot-api build/telegram-bot-api-linux-arm64

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: telegram-bot-api-arm64
          path: build/telegram-bot-api-linux-arm64

  create-release:
    name: Create Release
    needs: [setup-release-info, build-x86_64, build-arm64]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ needs.setup-release-info.outputs.release-title }}
          tag_name: ${{ needs.setup-release-info.outputs.release-tag-name }}
          prerelease: ${{ needs.setup-release-info.outputs.is-prerelease }}
          files: |
            telegram-bot-api-x86_64/telegram-bot-api-linux-x86_64
            telegram-bot-api-arm64/telegram-bot-api-linux-arm64
          generate_release_notes: true
