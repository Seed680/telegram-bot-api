name: Build Linux x86_64 and ARM64 (Alpine)
on:
  push:
    branches: [main, master]
    tags:
      - 'v*'
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  setup-release-info:
    name: Setup Release Info
    runs-on: ubuntu-latest
    outputs:
      release-version: ${{ steps.version.outputs.version }}
      release-tag-name: ${{ steps.tag.outputs.tag-name }}
      release-title: ${{ steps.title.outputs.title }}
      is-prerelease: ${{ steps.prerelease.outputs.prerelease }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Extract version from CMakeLists.txt
        id: version
        run: echo "version=$(grep -oP 'project\(TelegramBotApi VERSION \K[\d.]+' CMakeLists.txt)" >> $GITHUB_OUTPUT

      - name: Determine Tag Name
        id: tag
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "tag-name=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "tag-name=manual-${{ github.run_number }}" >> $GITHUB_OUTPUT
          fi

      - name: Determine Release Title
        id: title
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "title=${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "title=manual-${{ github.run_number }}" >> $GITHUB_OUTPUT
          fi

      - name: Determine Prerelease
        id: prerelease
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "prerelease=false" >> $GITHUB_OUTPUT
          else
            echo "prerelease=true" >> $GITHUB_OUTPUT
          fi

  build-x86_64:
    name: Build for Linux x86_64 (Alpine)
    runs-on: alpine-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apk add --no-cache cmake g++ make gperf zlib-dev openssl-dev

      - name: Build x86_64
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF ..
          cmake --build . --target install

      - name: Rename artifact
        run: mv build/telegram-bot-api build/telegram-bot-api-linux-x86_64

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: telegram-bot-api-x86_64
          path: build/telegram-bot-api-linux-x86_64

  build-arm64:
    name: Build for Linux ARM64 (Alpine)
    runs-on: alpine-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install cross-compilation dependencies
        run: |
          sudo apk add --no-cache \
            build-base \
            cmake \
            gcc-aarch64-alpine-linux-musl \
            g++-aarch64-alpine-linux-musl \
            git \
            gperf \
            zlib-dev \
            openssl-dev \
            zlib-static \
            openssl-static

      - name: Create build directories
        run: |
          mkdir -p build
          mkdir -p build-native

      - name: Prepare for cross-compilation
        run: |
          cd build-native
          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF ..
          cmake --build . --target prepare_cross_compiling

      - name: Build ARM64
        run: |
          cd build
          cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_CROSSCOMPILING=True \
            -DCMAKE_C_COMPILER=aarch64-alpine-linux-musl-gcc \
            -DCMAKE_CXX_COMPILER=aarch64-alpine-linux-musl-g++ \
            -DCMAKE_FIND_ROOT_PATH=/usr/aarch64-alpine-linux-musl \
            -DCMAKE_PREFIX_PATH=/usr/aarch64-alpine-linux-musl \
            -DCMAKE_EXE_LINKER_FLAGS="-static" \
            -DCMAKE_SHARED_LINKER_FLAGS="-static" \
            -DBUILD_SHARED_LIBS=OFF \
            ..
          cmake --build . --target install

      - name: Rename artifact
        run: mv build/telegram-bot-api build/telegram-bot-api-linux-arm64

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: telegram-bot-api-arm64
          path: build/telegram-bot-api-linux-arm64

  create-release:
    name: Create Release
    needs: [setup-release-info, build-x86_64, build-arm64]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ needs.setup-release-info.outputs.release-title }}
          tag_name: ${{ needs.setup-release-info.outputs.release-tag-name }}
          prerelease: ${{ needs.setup-release-info.outputs.is-prerelease }}
          files: |
            telegram-bot-api-x86_64/telegram-bot-api-linux-x86_64
            telegram-bot-api-arm64/telegram-bot-api-linux-arm64
          generate_release_notes: true
